name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  code-quality:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort pytest pytest-cov
        
    - name: 🎨 Code formatting check (Black)
      run: |
        black --check --diff .
        
    - name: 📋 Import sorting check (isort)
      run: |
        isort --check-only --diff .
        
    - name: 🔍 Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔒 Run Bandit Security Linter
      uses: tj-actions/bandit@v5.1
      with:
        options: "-r . -f json -o bandit-report.json"
        
    - name: 📊 Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json

  test:
    name: 🧪 Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements*.txt') }}
        
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
        
    - name: 🧪 Run tests with pytest
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest tests/ --cov=app --cov-report=xml --cov-report=html --junitxml=pytest-results.xml
        
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: 📋 Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pytest-results-${{ matrix.python-version }}
        path: |
          pytest-results.xml
          htmlcov/

  build-and-deploy:
    name: 🚀 Build & Deploy
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🏗️ Build application
      run: |
        echo "Building Rex AI Assistant..."
        # Add any build steps here
        python -m py_compile main.py
        python -m py_compile app/*.py
        
    - name: 📦 Create deployment package
      run: |
        mkdir -p dist
        cp -r app static templates *.py requirements.txt dist/
        
    - name: 📊 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: rex-ai-build
        path: dist/
        
    # Uncomment when ready to deploy to production
    # - name: 🚀 Deploy to Production
    #   uses: vercel/action@v1
    #   with:
    #     vercel-token: ${{ secrets.VERCEL_TOKEN }}
    #     vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
    #     vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
    #     vercel-args: '--prod'

  lighthouse-ci:
    name: 🚨 Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 📦 Install Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        
    - name: 🚨 Run Lighthouse CI
      run: |
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, test, build-and-deploy]
    if: always()
    
    steps:
    - name: 📢 Notify on success
      if: ${{ needs.code-quality.result == 'success' && needs.test.result == 'success' }}
      run: |
        echo "✅ All checks passed! Rex AI Assistant is ready for deployment."
        
    - name: 📢 Notify on failure
      if: ${{ needs.code-quality.result == 'failure' || needs.test.result == 'failure' }}
      run: |
        echo "❌ Some checks failed. Please review the logs and fix issues."
        exit 1